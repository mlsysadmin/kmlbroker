name: Docker Image CI with Separate Versioning for Frontend and Backend

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Clear npm cache
      run: npm cache clean --force

    - name: Set npm registry
      run: npm config set registry https://registry.npmjs.org/

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Frontend versioning and build
    - name: Read frontend version from VERSION file or set initial version
      id: frontend_version
      run: |
        if [ -f frontend/VERSION ]; then
          VERSION=$(cat frontend/VERSION)
        else
          VERSION="1.0.0"
        fi
        echo "Frontend version: $VERSION"
        echo "FRONTEND_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Increment frontend version (Patch, Minor, Major)
      id: increment_frontend_version
      run: |
        IFS='.' read -r major minor patch <<< "${{ env.FRONTEND_VERSION }}"
        patch=$((patch + 1))  # Increment the patch version (you can modify this logic to increment major or minor)
        NEW_FRONTEND_VERSION="${major}.${minor}.${patch}"
        echo "New frontend version: $NEW_FRONTEND_VERSION"
        echo "FRONTEND_VERSION=$NEW_FRONTEND_VERSION" >> $GITHUB_ENV
        echo $NEW_FRONTEND_VERSION > frontend/VERSION  # Save new version to frontend's VERSION file

    - name: Build Frontend Docker image
      run: docker build ./frontend --file ./frontend/Dockerfile --tag frontend-temp:${{ env.FRONTEND_VERSION }}

    - name: Set frontend repository name in lowercase
      id: frontend_lower
      run: echo "FRONTEND_REPO=$(echo ${{ github.actor }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Tag Frontend Docker image with version
      run: |
        docker tag frontend-temp:${{ env.FRONTEND_VERSION }} ghcr.io/${{ env.FRONTEND_REPO }}/ml-brokerage-frontend:${{ env.FRONTEND_VERSION }}
        docker tag frontend-temp:${{ env.FRONTEND_VERSION }} ghcr.io/${{ env.FRONTEND_REPO }}/ml-brokerage-frontend:latest

    - name: Push Frontend Docker image
      run: |
        docker push ghcr.io/${{ env.FRONTEND_REPO }}/ml-brokerage-frontend:${{ env.FRONTEND_VERSION }}
        docker push ghcr.io/${{ env.FRONTEND_REPO }}/ml-brokerage-frontend:latest

    # Backend versioning and build
    - name: Read backend version from VERSION file or set initial version
      id: backend_version
      run: |
        if [ -f backend/VERSION ]; then
          VERSION=$(cat backend/VERSION)
        else
          VERSION="1.0.0"
        fi
        echo "Backend version: $VERSION"
        echo "BACKEND_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Increment backend version (Patch, Minor, Major)
      id: increment_backend_version
      run: |
        IFS='.' read -r major minor patch <<< "${{ env.BACKEND_VERSION }}"
        patch=$((patch + 1))  # Increment the patch version (you can modify this logic to increment major or minor)
        NEW_BACKEND_VERSION="${major}.${minor}.${patch}"
        echo "New backend version: $NEW_BACKEND_VERSION"
        echo "BACKEND_VERSION=$NEW_BACKEND_VERSION" >> $GITHUB_ENV
        echo $NEW_BACKEND_VERSION > backend/VERSION  # Save new version to backend's VERSION file

    - name: Build Backend Docker image
      run: docker build ./backend --file ./backend/Dockerfile --tag backend-temp:${{ env.BACKEND_VERSION }}

    - name: Set backend repository name in lowercase
      id: backend_lower
      run: echo "BACKEND_REPO=$(echo ${{ github.actor }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Tag Backend Docker image with version
      run: |
        docker tag backend-temp:${{ env.BACKEND_VERSION }} ghcr.io/${{ env.BACKEND_REPO }}/ml-brokerage-backend:${{ env.BACKEND_VERSION }}
        docker tag backend-temp:${{ env.BACKEND_VERSION }} ghcr.io/${{ env.BACKEND_REPO }}/ml-brokerage-backend:latest

    - name: Push Backend Docker image
      run: |
        docker push ghcr.io/${{ env.BACKEND_REPO }}/ml-brokerage-backend:${{ env.BACKEND_VERSION }}
        docker push ghcr.io/${{ env.BACKEND_REPO }}/ml-brokerage-backend:latest
